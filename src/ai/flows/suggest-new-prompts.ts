// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for suggesting new AI prompts based on user-selected categories and recent favorite prompts.
 *
 * The flow takes user-selected categories and their favorite prompts as input and suggests new prompts.
 * - suggestNewPrompts - A function that takes user categories and favorite prompts and returns suggested prompts.
 * - SuggestNewPromptsInput - The input type for the suggestNewPrompts function.
 * - SuggestNewPromptsOutput - The return type for the suggestNewPrompts function, listing suggested prompts.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestNewPromptsInputSchema = z.object({
  selectedCategories: z
    .array(z.string())
    .describe('A list of categories selected by the user.'),
  favoritePrompts: z
    .array(z.string())
    .optional()
    .describe('A list of the user\'s favorite prompts.'),
});

export type SuggestNewPromptsInput = z.infer<typeof SuggestNewPromptsInputSchema>;

const SuggestNewPromptsOutputSchema = z.object({
  suggestedPrompts: z
    .array(z.string())
    .describe('A list of AI prompts suggested based on the input categories and favorite prompts.'),
});

export type SuggestNewPromptsOutput = z.infer<typeof SuggestNewPromptsOutputSchema>;

export async function suggestNewPrompts(input: SuggestNewPromptsInput): Promise<SuggestNewPromptsOutput> {
  return suggestNewPromptsFlow(input);
}

const canSuggestPrompts = ai.defineTool({
  name: 'canSuggestPrompts',
  description: 'This tool determines whether new prompts can be suggested, returning true if possible, false otherwise.',
  inputSchema: z.object({
    selectedCategories: z
      .array(z.string())
      .describe('A list of categories selected by the user.'),
    favoritePrompts: z
      .array(z.string())
      .optional()
      .describe('A list of the user\'s favorite prompts.'),
  }),
  outputSchema: z.boolean(),
},
async (input) => {
  // Implement logic to determine if suggestions can be made.
  // This could be based on having enough categories or favorite prompts.
  return input.selectedCategories.length > 0 || (input.favoritePrompts !== undefined && input.favoritePrompts.length > 0);
});

const suggestNewPromptsPrompt = ai.definePrompt({
  name: 'suggestNewPromptsPrompt',
  input: {schema: SuggestNewPromptsInputSchema},
  output: {schema: SuggestNewPromptsOutputSchema},
  prompt: `You are an AI prompt suggestion expert. Based on the categories the user has selected:
  {{#each selectedCategories}}
    - {{{this}}}
  {{/each}}

  and their favorite prompts (if any):
  {{#if favoritePrompts}}
    {{#each favoritePrompts}}
      - {{{this}}}
    {{/each}}
  {{else}}
    The user has no favorite prompts.
  {{/if}}

  Suggest 5 new AI prompts that the user might find interesting.
  `,
  tools: [canSuggestPrompts],
  system: `You are an AI assistant designed to suggest new prompts to users. Use the canSuggestPrompts tool to check if you can make a helpful recommendation, and generate prompts accordingly.`,
});

const suggestNewPromptsFlow = ai.defineFlow(
  {
    name: 'suggestNewPromptsFlow',
    inputSchema: SuggestNewPromptsInputSchema,
    outputSchema: SuggestNewPromptsOutputSchema,
  },
  async input => {
    const canSuggest = await canSuggestPrompts(input);

    if (!canSuggest) {
      return {suggestedPrompts: []};
    }

    const {output} = await suggestNewPromptsPrompt(input);
    return output!;
  }
);
